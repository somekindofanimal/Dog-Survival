plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
}

version = '0.0.0'
group = 'com.github'
archivesBaseName = "DogSurvival-1.20.1"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

sourceSets {
    main
}

tasks.named("processResources") {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

minecraft {

    mappings channel: 'official', version: '1.20.1'

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            taskName 'dogsurvival_client'
            workingDirectory file('run')
            property 'forge.logging.console.level', 'debug'
            mods {
                dogsurvival.sources((SourceSet[]) [sourceSets.main])
            }
        }

        server {
            taskName 'dogsurvival_server'
            workingDirectory file('run-server')
            property 'forge.logging.console.level', 'debug'
            mods {
                dogsurvival.sources((SourceSet[]) [sourceSets.main])
            }
        }

        data {
            taskName 'dogsurvival_data'
            workingDirectory file('run')
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'dogsurvival', '--all', '--output', '"' + file('src/generated/resources/') + '"', '--existing', '"' + sourceSets.main.resources.srcDirs[0] + '"'
            mods {
                dogsurvival.sources((SourceSet[]) [sourceSets.main])
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    // Put repositories for dependencies here
    // ForgeGradle automatically adds the Forge maven and Maven Central for you

    // If you have mod jar dependencies in ./libs, you can declare them as a repository like so:
    // flatDir {
    //     dir 'libs'
    // }
}

dependencies {

    minecraft 'net.minecraftforge:forge:1.20.1-47.1.0'

}


// task sourcesJar(type: Jar) {
//     duplicatesStrategy(DuplicatesStrategy.FAIL)
//     archiveClassifier = 'sources'
//     from sourceSets.main.allJava
//     from sourceSets.api.allJava
// }

// task apiJar(type: Jar) {
//     duplicatesStrategy(DuplicatesStrategy.FAIL)
//     archiveClassifier = 'api'
//     from sourceSets.api.output
//     from sourceSets.api.allJava
// }

// artifacts {
//     archives sourcesJar
//     archives apiJar
// }


jar {
    from sourceSets.main.output

    manifest {
        attributes([
            "Specification-Title": "Dog Survival",
            "Specification-Vendor": "",
            "Specification-Version": project.version,
            "Implementation-Title": project.name,
            "Implementation-Version": project.version,
            "Implementation-Vendor" :"",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}


// publishing {
//     publications {
//         mavenJava(MavenPublication) {
//             artifact jar
//         }
//     }
//     repositories {
//         maven {
//             url "file://${project.projectDir}/mcmodsrepo"
//         }
//     }
// }

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

// if (project.hasProperty('UPDATE_MAPPINGS')) {
//     extractRangeMap {
//         sources sourceSets.api.java.srcDirs
//     }
//     applyRangeMap {
//         sources sourceSets.api.java.srcDirs
//     }
//     sourceSets.api.java.srcDirs.each { extractMappedNew.addTarget it }
// }
